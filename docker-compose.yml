services:
  flask-app:
    networks:
      - app-network
    build:
      context: .
      dockerfile: Dockerfile
    container_name: flask-app
    ports:
      - "5000:5000"
    # Integrer le mode develop
    environment:
      FLASK_ENV: "development"
      DATABASE_URL: "postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}"
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      com.example.description: "Flask backend"
    deploy:
      # OPTIMISATION
      resources:
        limits:
          cpus: "0.5"
          memory: "256M"

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - flask-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost"]
      interval: 30s
      timeout: 10s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: "0.25"
          memory: "256M"
    networks:
      - app-network
    labels:
      service: "nginx-reverse-proxy"

  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres-password
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: "512M"
    networks:
      - app-network
    secrets:
      - postgres-password
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${POSTGRES_USER}", "${POSTGRES_DB}"]
      interval: 30s
      timeout: 10s
      retries: 5
    labels:
      service: "postgres-db"

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data:

secrets:
  postgres-password:
    file: .secrets/postgres-password.txt